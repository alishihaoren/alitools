/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ali.test.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class TsData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5719174395669683800L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TsData\",\"namespace\":\"com.zhenergy.tdagent.platform.bean\",\"fields\":[{\"name\":\"isGood\",\"type\":\"boolean\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"tagValue\",\"type\":\"float\"},{\"name\":\"tbName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TsData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TsData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TsData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TsData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TsData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TsData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TsData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TsData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TsData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private boolean isGood;
  private long time;
  private float tagValue;
  private CharSequence tbName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TsData() {}

  /**
   * All-args constructor.
   * @param isGood The new value for isGood
   * @param time The new value for time
   * @param tagValue The new value for tagValue
   * @param tbName The new value for tbName
   */
  public TsData(Boolean isGood, Long time, Float tagValue, CharSequence tbName) {
    this.isGood = isGood;
    this.time = time;
    this.tagValue = tagValue;
    this.tbName = tbName;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return isGood;
    case 1: return time;
    case 2: return tagValue;
    case 3: return tbName;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: isGood = (Boolean)value$; break;
    case 1: time = (Long)value$; break;
    case 2: tagValue = (Float)value$; break;
    case 3: tbName = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'isGood' field.
   * @return The value of the 'isGood' field.
   */
  public boolean getIsGood() {
    return isGood;
  }


  /**
   * Sets the value of the 'isGood' field.
   * @param value the value to set.
   */
  public void setIsGood(boolean value) {
    this.isGood = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public long getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'tagValue' field.
   * @return The value of the 'tagValue' field.
   */
  public float getTagValue() {
    return tagValue;
  }


  /**
   * Sets the value of the 'tagValue' field.
   * @param value the value to set.
   */
  public void setTagValue(float value) {
    this.tagValue = value;
  }

  /**
   * Gets the value of the 'tbName' field.
   * @return The value of the 'tbName' field.
   */
  public CharSequence getTbName() {
    return tbName;
  }


  /**
   * Sets the value of the 'tbName' field.
   * @param value the value to set.
   */
  public void setTbName(CharSequence value) {
    this.tbName = value;
  }

  /**
   * Creates a new TsData RecordBuilder.
   * @return A new TsData RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new TsData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TsData RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new TsData RecordBuilder by copying an existing TsData instance.
   * @param other The existing instance to copy.
   * @return A new TsData RecordBuilder
   */
  public static Builder newBuilder(TsData other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for TsData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TsData>
    implements org.apache.avro.data.RecordBuilder<TsData> {

    private boolean isGood;
    private long time;
    private float tagValue;
    private CharSequence tbName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.isGood)) {
        this.isGood = data().deepCopy(fields()[0].schema(), other.isGood);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tagValue)) {
        this.tagValue = data().deepCopy(fields()[2].schema(), other.tagValue);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tbName)) {
        this.tbName = data().deepCopy(fields()[3].schema(), other.tbName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing TsData instance
     * @param other The existing instance to copy.
     */
    private Builder(TsData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.isGood)) {
        this.isGood = data().deepCopy(fields()[0].schema(), other.isGood);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tagValue)) {
        this.tagValue = data().deepCopy(fields()[2].schema(), other.tagValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tbName)) {
        this.tbName = data().deepCopy(fields()[3].schema(), other.tbName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'isGood' field.
      * @return The value.
      */
    public boolean getIsGood() {
      return isGood;
    }


    /**
      * Sets the value of the 'isGood' field.
      * @param value The value of 'isGood'.
      * @return This builder.
      */
    public Builder setIsGood(boolean value) {
      validate(fields()[0], value);
      this.isGood = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'isGood' field has been set.
      * @return True if the 'isGood' field has been set, false otherwise.
      */
    public boolean hasIsGood() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'isGood' field.
      * @return This builder.
      */
    public Builder clearIsGood() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public long getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public Builder setTime(long value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public Builder clearTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tagValue' field.
      * @return The value.
      */
    public float getTagValue() {
      return tagValue;
    }


    /**
      * Sets the value of the 'tagValue' field.
      * @param value The value of 'tagValue'.
      * @return This builder.
      */
    public Builder setTagValue(float value) {
      validate(fields()[2], value);
      this.tagValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tagValue' field has been set.
      * @return True if the 'tagValue' field has been set, false otherwise.
      */
    public boolean hasTagValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tagValue' field.
      * @return This builder.
      */
    public Builder clearTagValue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tbName' field.
      * @return The value.
      */
    public CharSequence getTbName() {
      return tbName;
    }


    /**
      * Sets the value of the 'tbName' field.
      * @param value The value of 'tbName'.
      * @return This builder.
      */
    public Builder setTbName(CharSequence value) {
      validate(fields()[3], value);
      this.tbName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tbName' field has been set.
      * @return True if the 'tbName' field has been set, false otherwise.
      */
    public boolean hasTbName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tbName' field.
      * @return This builder.
      */
    public Builder clearTbName() {
      tbName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TsData build() {
      try {
        TsData record = new TsData();
        record.isGood = fieldSetFlags()[0] ? this.isGood : (Boolean) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (Long) defaultValue(fields()[1]);
        record.tagValue = fieldSetFlags()[2] ? this.tagValue : (Float) defaultValue(fields()[2]);
        record.tbName = fieldSetFlags()[3] ? this.tbName : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TsData>
    WRITER$ = (org.apache.avro.io.DatumWriter<TsData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TsData>
    READER$ = (org.apache.avro.io.DatumReader<TsData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeBoolean(this.isGood);

    out.writeLong(this.time);

    out.writeFloat(this.tagValue);

    out.writeString(this.tbName);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.isGood = in.readBoolean();

      this.time = in.readLong();

      this.tagValue = in.readFloat();

      this.tbName = in.readString(this.tbName instanceof Utf8 ? (Utf8)this.tbName : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.isGood = in.readBoolean();
          break;

        case 1:
          this.time = in.readLong();
          break;

        case 2:
          this.tagValue = in.readFloat();
          break;

        case 3:
          this.tbName = in.readString(this.tbName instanceof Utf8 ? (Utf8)this.tbName : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










